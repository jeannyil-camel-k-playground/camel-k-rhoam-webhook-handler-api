{
    "openapi": "3.0.2",
    "info": {
        "title": "RHOAM Webhook Events Handler API",
        "version": "1.0.0",
        "description": "API that handles RHOAM Admin/Developer Portals webhook events",
        "contact": {
            "name": "Jean Nyilimbibi"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "http://rhoam-webhook-events-handler-api.apps.jeannyil.sandbox452.opentlc.com",
            "description": "API Backend URL"
        }
    ],
    "paths": {
        "/webhook/amqpbridge": {
            "summary": "Bridges RHOAM Admin/Developer Portals webhook events to an AMQP broker",
            "description": "Callback endpoint that receives RHOAM Admin/Developer Portals webhook events and sends them to an AMQP queue",
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseMessage"
                                },
                                "examples": {
                                    "responseMessageOK": {
                                        "value": {
                                            "status": "OK"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Pong"
                    }
                },
                "operationId": "pingWebhook",
                "summary": "Handles RHOAM webhook ping",
                "description": "Handles RHOAM webhook ping"
            },
            "post": {
                "requestBody": {
                    "description": "RHOAM Admin/Developer Portal webhook event in XML format",
                    "content": {
                        "application/xml": {
                            "schema": {
                                "type": "string"
                            },
                            "examples": {
                                "accountCreated": {
                                    "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<event>\n  <action>created</action>\n  <type>account</type>\n  <object>\n    <account>\n      <id>6</id>\n      <created_at>2021-05-14T20:22:53Z</created_at>\n      <updated_at>2021-05-14T20:22:53Z</updated_at>\n      <state>created</state>\n      <org_name>TestAccount</org_name>\n      <extra_fields/>\n      <monthly_billing_enabled>true</monthly_billing_enabled>\n      <monthly_charging_enabled>true</monthly_charging_enabled>\n      <credit_card_stored>false</credit_card_stored>\n      <plans>\n        <plan default=\"true\">\n          <id>6</id>\n          <name>Default</name>\n          <type>account_plan</type>\n          <state>hidden</state>\n          <approval_required>false</approval_required>\n          <setup_fee>0.0</setup_fee>\n          <cost_per_month>0.0</cost_per_month>\n          <trial_period_days/>\n          <cancellation_period>0</cancellation_period>\n        </plan>\n      </plans>\n      <users>\n        <user>\n          <id>9</id>\n          <created_at>2021-05-14T20:22:53Z</created_at>\n          <updated_at>2021-05-14T20:22:53Z</updated_at>\n          <account_id>6</account_id>\n          <state>pending</state>\n          <role>admin</role>\n          <username>admin</username>\n          <email>admin@acme.org</email>\n          <extra_fields/>\n        </user>\n      </users>\n    </account>\n  </object>\n</event>"
                                },
                                "accountUpdated": {
                                    "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<event>\n  <action>updated</action>\n  <type>account</type>\n  <object>\n    <account>\n      <id>6</id>\n      <created_at>2021-05-14T20:22:53Z</created_at>\n      <updated_at>2021-05-14T20:22:53Z</updated_at>\n      <state>approved</state>\n      <org_name>TestAccount</org_name>\n      <extra_fields/>\n      <monthly_billing_enabled>true</monthly_billing_enabled>\n      <monthly_charging_enabled>true</monthly_charging_enabled>\n      <credit_card_stored>false</credit_card_stored>\n      <plans>\n        <plan default=\"true\">\n          <id>6</id>\n          <name>Default</name>\n          <type>account_plan</type>\n          <state>hidden</state>\n          <approval_required>false</approval_required>\n          <setup_fee>0.0</setup_fee>\n          <cost_per_month>0.0</cost_per_month>\n          <trial_period_days/>\n          <cancellation_period>0</cancellation_period>\n        </plan>\n      </plans>\n      <users>\n        <user>\n          <id>9</id>\n          <created_at>2021-05-14T20:22:53Z</created_at>\n          <updated_at>2021-05-14T20:22:53Z</updated_at>\n          <account_id>6</account_id>\n          <state>pending</state>\n          <role>admin</role>\n          <username>admin</username>\n          <email>admin@acme.org</email>\n          <extra_fields/>\n        </user>\n      </users>\n    </account>\n  </object>\n</event>"
                                }
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "type": "string"
                            },
                            "examples": {
                                "applicationPlanChanged": {
                                    "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<event>\n    <action>plan_changed</action>\n    <type>application</type>\n    <object>\n        <application>\n            <id>11</id>\n            <created_at>2021-05-14T21:08:26Z</created_at>\n            <updated_at>2021-05-15T01:37:53Z</updated_at>\n            <state>live</state>\n            <user_account_id>7</user_account_id>\n            <first_traffic_at />\n            <first_daily_traffic_at />\n            <service_id>2</service_id>\n            <user_key>24dfa552d2b54907db559a47362bc9a8</user_key>\n            <provider_verification_key>3758600979422b1b697583de17d4e8a7</provider_verification_key>\n            <plan custom=\"false\" default=\"false\">\n                <id>8</id>\n                <name>Unlimited</name>\n                <type>application_plan</type>\n                <state>published</state>\n                <approval_required>false</approval_required>\n                <setup_fee>0.0</setup_fee>\n                <cost_per_month>0.0</cost_per_month>\n                <trial_period_days />\n                <cancellation_period>0</cancellation_period>\n                <service_id>2</service_id>\n            </plan>\n            <name>TestAccount's App</name>\n            <description>TestAccount's Application to the Echo API Product</description>\n            <extra_fields></extra_fields>\n        </application>\n    </object>\n</event>"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseMessage"
                                },
                                "examples": {
                                    "responseMessageOK": {
                                        "value": {
                                            "status": "OK"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "RHOAM XML event handled."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseMessage"
                                },
                                "examples": {
                                    "responseMessageKO400": {
                                        "value": {
                                            "status": "KO",
                                            "error": {
                                                "code": "400",
                                                "description": "Bad Request",
                                                "message": "org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.w3c.dom.Document with value PLAIN TEXT DATA\n due to org.xml.sax.SAXParseException: Content is not allowed in prolog."
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Bad Request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseMessage"
                                },
                                "examples": {
                                    "responseMessageKO500": {
                                        "value": {
                                            "status": "KO",
                                            "error": {
                                                "code": "500",
                                                "description": "Internal Server Error",
                                                "message": "java.lang.Exception: Mocked error message"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Internal server error"
                    }
                },
                "operationId": "sendToAMQPQueue",
                "summary": "Sends RHOAM Admin/Developer Portal webhook event to an AMQP queue",
                "description": "Sends RHOAM Admin/Developer Portal webhook event to an AMQP queue"
            }
        }
    },
    "components": {
        "schemas": {
            "ResponseMessage": {
                "title": "Root Type for ResponseMessage",
                "description": "Response message",
                "required": [
                    "status"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Status",
                        "enum": [
                            "OK",
                            "KO"
                        ],
                        "type": "string"
                    },
                    "error": {
                        "$ref": "#/components/schemas/ErrorMessageType",
                        "description": "Status message"
                    }
                },
                "example": {
                    "status": "KO",
                    "error": {
                        "code": "500",
                        "description": "Internal server error",
                        "message": "java.lang.Exception: mocked error"
                    }
                }
            },
            "ErrorMessageType": {
                "title": "Root Type for StatusMessageType",
                "description": "Error message type  ",
                "required": [
                    "code",
                    "description",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "code": "500",
                    "description": "Internal server error",
                    "message": "java.lang.Exception: mocked error"
                }
            }
        }
    }
}